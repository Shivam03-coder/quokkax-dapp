/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CrowdFundingAllDataInterface extends Interface {
  getFunction(
    nameOrSignature: "createFunding" | "deployedFundings"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "fundingDatas"): EventFragment;

  encodeFunctionData(
    functionFragment: "createFunding",
    values: [string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedFundings",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedFundings",
    data: BytesLike
  ): Result;
}

export namespace fundingDatasEvent {
  export type InputTuple = [
    title: string,
    reqiredAmount: BigNumberish,
    Owner: AddressLike,
    FundingAddress: AddressLike,
    ImageUri: string,
    timestamp: BigNumberish,
    cateogory: string
  ];
  export type OutputTuple = [
    title: string,
    reqiredAmount: bigint,
    Owner: string,
    FundingAddress: string,
    ImageUri: string,
    timestamp: bigint,
    cateogory: string
  ];
  export interface OutputObject {
    title: string;
    reqiredAmount: bigint;
    Owner: string;
    FundingAddress: string;
    ImageUri: string;
    timestamp: bigint;
    cateogory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrowdFundingAllData extends BaseContract {
  connect(runner?: ContractRunner | null): CrowdFundingAllData;
  waitForDeployment(): Promise<this>;

  interface: CrowdFundingAllDataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFunding: TypedContractMethod<
    [
      createFundingTitle: string,
      requiredFuncdingAmount: BigNumberish,
      ImageUri: string,
      Cateogory: string,
      StoryUri: string
    ],
    [void],
    "nonpayable"
  >;

  deployedFundings: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFunding"
  ): TypedContractMethod<
    [
      createFundingTitle: string,
      requiredFuncdingAmount: BigNumberish,
      ImageUri: string,
      Cateogory: string,
      StoryUri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployedFundings"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "fundingDatas"
  ): TypedContractEvent<
    fundingDatasEvent.InputTuple,
    fundingDatasEvent.OutputTuple,
    fundingDatasEvent.OutputObject
  >;

  filters: {
    "fundingDatas(string,uint256,address,address,string,uint256,string)": TypedContractEvent<
      fundingDatasEvent.InputTuple,
      fundingDatasEvent.OutputTuple,
      fundingDatasEvent.OutputObject
    >;
    fundingDatas: TypedContractEvent<
      fundingDatasEvent.InputTuple,
      fundingDatasEvent.OutputTuple,
      fundingDatasEvent.OutputObject
    >;
  };
}

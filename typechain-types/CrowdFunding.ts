/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CrowdFundingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DonateAmount"
      | "FundImage"
      | "FundStory"
      | "FundTitle"
      | "OwnerAddress"
      | "ReqFundAmount"
      | "TotalRecivedAmount"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;

  encodeFunctionData(
    functionFragment: "DonateAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FundImage", values?: undefined): string;
  encodeFunctionData(functionFragment: "FundStory", values?: undefined): string;
  encodeFunctionData(functionFragment: "FundTitle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OwnerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ReqFundAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TotalRecivedAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DonateAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FundImage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FundStory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FundTitle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ReqFundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TotalRecivedAmount",
    data: BytesLike
  ): Result;
}

export namespace DonatedEvent {
  export type InputTuple = [
    donor: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [donor: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    donor: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CrowdFunding extends BaseContract {
  connect(runner?: ContractRunner | null): CrowdFunding;
  waitForDeployment(): Promise<this>;

  interface: CrowdFundingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DonateAmount: TypedContractMethod<[], [void], "payable">;

  FundImage: TypedContractMethod<[], [string], "view">;

  FundStory: TypedContractMethod<[], [string], "view">;

  FundTitle: TypedContractMethod<[], [string], "view">;

  OwnerAddress: TypedContractMethod<[], [string], "view">;

  ReqFundAmount: TypedContractMethod<[], [bigint], "view">;

  TotalRecivedAmount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DonateAmount"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "FundImage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FundStory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FundTitle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OwnerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ReqFundAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TotalRecivedAmount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Donated"
  ): TypedContractEvent<
    DonatedEvent.InputTuple,
    DonatedEvent.OutputTuple,
    DonatedEvent.OutputObject
  >;

  filters: {
    "Donated(address,uint256,uint256)": TypedContractEvent<
      DonatedEvent.InputTuple,
      DonatedEvent.OutputTuple,
      DonatedEvent.OutputObject
    >;
    Donated: TypedContractEvent<
      DonatedEvent.InputTuple,
      DonatedEvent.OutputTuple,
      DonatedEvent.OutputObject
    >;
  };
}
